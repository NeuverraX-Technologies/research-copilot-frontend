{"ast":null,"code":"// src/api/fetchAIResponse.js - Production-ready with comprehensive error handling\nexport async function fetchAIResponse(query) {\n  try {\n    var _data3, _data4, _data5, _data6, _data7, _data8;\n    if (!query || !query.toString().trim()) {\n      console.warn(\"fetchAIResponse: Empty query provided\");\n      return {\n        summary: \"No query provided.\",\n        sections: [],\n        references: [],\n        keyTerms: [],\n        relatedFields: [],\n        suggestedCollaborations: []\n      };\n    }\n\n    // Enhanced API base URL handling\n    const apiBase = process.env.REACT_APP_API_BASE || \"http://localhost:5000\";\n    const endpoint = `${apiBase}/api/query`;\n    console.log(\"üîç Fetching from:\", endpoint);\n    console.log(\"üìù Query:\", query.substring(0, 100) + \"...\");\n\n    // Add timeout to prevent hanging\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 120000); // 120 second timeout\n\n    const res = await fetch(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      }),\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    console.log(\"üì° Response status:\", res.status);\n    if (!res.ok) {\n      let errText = \"Unknown error\";\n      try {\n        errText = await res.text();\n        console.error(\"‚ùå Backend error response:\", errText);\n      } catch (e) {\n        console.error(\"‚ùå Could not read error response\");\n      }\n      throw new Error(`Server responded with ${res.status}: ${errText}`);\n    }\n\n    // Parse response\n    let data;\n    try {\n      var _data, _data$summary, _data2, _data2$sections;\n      data = await res.json();\n      console.log(\"‚úÖ Successfully parsed JSON response\");\n      console.log(\"üìä Response summary length:\", ((_data = data) === null || _data === void 0 ? void 0 : (_data$summary = _data.summary) === null || _data$summary === void 0 ? void 0 : _data$summary.length) || 0);\n      console.log(\"üìö Number of sections:\", ((_data2 = data) === null || _data2 === void 0 ? void 0 : (_data2$sections = _data2.sections) === null || _data2$sections === void 0 ? void 0 : _data2$sections.length) || 0);\n    } catch (parseErr) {\n      console.error(\"‚ùå JSON parse error:\", parseErr);\n      const rawText = await res.text();\n      console.error(\"Raw response:\", rawText.substring(0, 500));\n      throw new Error(\"Failed to parse server response as JSON\");\n    }\n\n    // Validate and normalize response structure\n    const normalizedResponse = {\n      summary: ((_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.summary) || \"No summary provided.\",\n      sections: Array.isArray((_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.sections) ? data.sections : [],\n      references: Array.isArray((_data5 = data) === null || _data5 === void 0 ? void 0 : _data5.references) ? data.references : [],\n      keyTerms: Array.isArray((_data6 = data) === null || _data6 === void 0 ? void 0 : _data6.keyTerms) ? data.keyTerms : [],\n      relatedFields: Array.isArray((_data7 = data) === null || _data7 === void 0 ? void 0 : _data7.relatedFields) ? data.relatedFields : [],\n      suggestedCollaborations: Array.isArray((_data8 = data) === null || _data8 === void 0 ? void 0 : _data8.suggestedCollaborations) ? data.suggestedCollaborations : []\n    };\n    console.log(\"‚úÖ Request completed successfully\");\n    return normalizedResponse;\n  } catch (err) {\n    console.error(\"‚ùå fetchAIResponse error:\", err);\n    console.error(\"Error name:\", err.name);\n    console.error(\"Error message:\", err.message);\n\n    // Provide specific error messages based on error type\n    let errorMessage = \"‚ö†Ô∏è Failed to fetch AI response. \";\n    let errorDetails = \"\";\n    if (err.name === 'AbortError') {\n      errorMessage = \"‚ö†Ô∏è Request timed out. \";\n      errorDetails = \"The server took too long to respond. This might be due to complex analysis. Please try a more specific query or try again.\";\n    } else if (err.message.includes(\"Failed to fetch\") || err.message.includes(\"NetworkError\")) {\n      errorMessage = \"‚ö†Ô∏è Network error. \";\n      errorDetails = \"Cannot connect to the server. Please ensure:\\n1. Backend server is running (check http://localhost:5000/health)\\n2. CORS is configured correctly\\n3. No firewall is blocking the connection\";\n    } else if (err.message.includes(\"JSON\")) {\n      errorMessage = \"‚ö†Ô∏è Invalid server response. \";\n      errorDetails = \"The server returned malformed data. This might be an OpenAI API issue or prompt parsing problem. Check server logs.\";\n    } else if (err.message.includes(\"500\")) {\n      errorMessage = \"‚ö†Ô∏è Server error. \";\n      errorDetails = \"The backend encountered an error. This is likely an OpenAI API issue. Check:\\n1. API key is valid\\n2. You have sufficient credits\\n3. Server console for detailed logs\";\n    } else if (err.message.includes(\"401\") || err.message.includes(\"403\")) {\n      errorMessage = \"‚ö†Ô∏è Authentication error. \";\n      errorDetails = \"OpenAI API key is invalid or missing. Check your .env file.\";\n    } else {\n      errorDetails = `Error: ${err.message}`;\n    }\n    return {\n      summary: errorMessage + errorDetails,\n      sections: [{\n        title: \"Troubleshooting Steps\",\n        content: `1. Check if backend server is running: http://localhost:5000/health\n2. Verify your .env file contains: OPENAI_API_KEY=your-key-here\n3. Check browser console (F12) for detailed error logs\n4. Check backend terminal for server-side errors\n5. Ensure you have OpenAI API credits available\n\nError Details:\n${err.message}\n\nIf the problem persists, please check:\n- Backend server logs\n- OpenAI API dashboard for quota/billing issues\n- Network connectivity`\n      }],\n      references: [],\n      keyTerms: [],\n      relatedFields: [],\n      suggestedCollaborations: []\n    };\n  }\n}","map":{"version":3,"names":["fetchAIResponse","query","_data3","_data4","_data5","_data6","_data7","_data8","toString","trim","console","warn","summary","sections","references","keyTerms","relatedFields","suggestedCollaborations","apiBase","process","env","REACT_APP_API_BASE","endpoint","log","substring","controller","AbortController","timeoutId","setTimeout","abort","res","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","status","ok","errText","text","error","e","Error","data","_data","_data$summary","_data2","_data2$sections","json","length","parseErr","rawText","normalizedResponse","Array","isArray","err","name","message","errorMessage","errorDetails","includes","title","content"],"sources":["D:/NeuverraX-Tech_Workspace/Agentic-AI-PRD/Research-copilot/research-copilot-frontend/src/api/fetchAIResponse.js"],"sourcesContent":["// src/api/fetchAIResponse.js - Production-ready with comprehensive error handling\r\nexport async function fetchAIResponse(query) {\r\n  try {\r\n    if (!query || !query.toString().trim()) {\r\n      console.warn(\"fetchAIResponse: Empty query provided\");\r\n      return { \r\n        summary: \"No query provided.\", \r\n        sections: [], \r\n        references: [],\r\n        keyTerms: [],\r\n        relatedFields: [],\r\n        suggestedCollaborations: []\r\n      };\r\n    }\r\n\r\n    // Enhanced API base URL handling\r\n    const apiBase = process.env.REACT_APP_API_BASE || \"http://localhost:5000\";\r\n    const endpoint = `${apiBase}/api/query`;\r\n    \r\n    console.log(\"üîç Fetching from:\", endpoint);\r\n    console.log(\"üìù Query:\", query.substring(0, 100) + \"...\");\r\n\r\n    // Add timeout to prevent hanging\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 120000); // 120 second timeout\r\n\r\n    const res = await fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: { \r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ query }),\r\n      signal: controller.signal\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    console.log(\"üì° Response status:\", res.status);\r\n\r\n    if (!res.ok) {\r\n      let errText = \"Unknown error\";\r\n      try {\r\n        errText = await res.text();\r\n        console.error(\"‚ùå Backend error response:\", errText);\r\n      } catch (e) {\r\n        console.error(\"‚ùå Could not read error response\");\r\n      }\r\n      \r\n      throw new Error(`Server responded with ${res.status}: ${errText}`);\r\n    }\r\n\r\n    // Parse response\r\n    let data;\r\n    try {\r\n      data = await res.json();\r\n      console.log(\"‚úÖ Successfully parsed JSON response\");\r\n      console.log(\"üìä Response summary length:\", data?.summary?.length || 0);\r\n      console.log(\"üìö Number of sections:\", data?.sections?.length || 0);\r\n    } catch (parseErr) {\r\n      console.error(\"‚ùå JSON parse error:\", parseErr);\r\n      const rawText = await res.text();\r\n      console.error(\"Raw response:\", rawText.substring(0, 500));\r\n      throw new Error(\"Failed to parse server response as JSON\");\r\n    }\r\n\r\n    // Validate and normalize response structure\r\n    const normalizedResponse = {\r\n      summary: data?.summary || \"No summary provided.\",\r\n      sections: Array.isArray(data?.sections) ? data.sections : [],\r\n      references: Array.isArray(data?.references) ? data.references : [],\r\n      keyTerms: Array.isArray(data?.keyTerms) ? data.keyTerms : [],\r\n      relatedFields: Array.isArray(data?.relatedFields) ? data.relatedFields : [],\r\n      suggestedCollaborations: Array.isArray(data?.suggestedCollaborations) ? data.suggestedCollaborations : []\r\n    };\r\n\r\n    console.log(\"‚úÖ Request completed successfully\");\r\n    return normalizedResponse;\r\n\r\n  } catch (err) {\r\n    console.error(\"‚ùå fetchAIResponse error:\", err);\r\n    console.error(\"Error name:\", err.name);\r\n    console.error(\"Error message:\", err.message);\r\n\r\n    // Provide specific error messages based on error type\r\n    let errorMessage = \"‚ö†Ô∏è Failed to fetch AI response. \";\r\n    let errorDetails = \"\";\r\n\r\n    if (err.name === 'AbortError') {\r\n      errorMessage = \"‚ö†Ô∏è Request timed out. \";\r\n      errorDetails = \"The server took too long to respond. This might be due to complex analysis. Please try a more specific query or try again.\";\r\n    } else if (err.message.includes(\"Failed to fetch\") || err.message.includes(\"NetworkError\")) {\r\n      errorMessage = \"‚ö†Ô∏è Network error. \";\r\n      errorDetails = \"Cannot connect to the server. Please ensure:\\n1. Backend server is running (check http://localhost:5000/health)\\n2. CORS is configured correctly\\n3. No firewall is blocking the connection\";\r\n    } else if (err.message.includes(\"JSON\")) {\r\n      errorMessage = \"‚ö†Ô∏è Invalid server response. \";\r\n      errorDetails = \"The server returned malformed data. This might be an OpenAI API issue or prompt parsing problem. Check server logs.\";\r\n    } else if (err.message.includes(\"500\")) {\r\n      errorMessage = \"‚ö†Ô∏è Server error. \";\r\n      errorDetails = \"The backend encountered an error. This is likely an OpenAI API issue. Check:\\n1. API key is valid\\n2. You have sufficient credits\\n3. Server console for detailed logs\";\r\n    } else if (err.message.includes(\"401\") || err.message.includes(\"403\")) {\r\n      errorMessage = \"‚ö†Ô∏è Authentication error. \";\r\n      errorDetails = \"OpenAI API key is invalid or missing. Check your .env file.\";\r\n    } else {\r\n      errorDetails = `Error: ${err.message}`;\r\n    }\r\n\r\n    return {\r\n      summary: errorMessage + errorDetails,\r\n      sections: [\r\n        {\r\n          title: \"Troubleshooting Steps\",\r\n          content: `1. Check if backend server is running: http://localhost:5000/health\r\n2. Verify your .env file contains: OPENAI_API_KEY=your-key-here\r\n3. Check browser console (F12) for detailed error logs\r\n4. Check backend terminal for server-side errors\r\n5. Ensure you have OpenAI API credits available\r\n\r\nError Details:\r\n${err.message}\r\n\r\nIf the problem persists, please check:\r\n- Backend server logs\r\n- OpenAI API dashboard for quota/billing issues\r\n- Network connectivity`\r\n        }\r\n      ],\r\n      references: [],\r\n      keyTerms: [],\r\n      relatedFields: [],\r\n      suggestedCollaborations: []\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}