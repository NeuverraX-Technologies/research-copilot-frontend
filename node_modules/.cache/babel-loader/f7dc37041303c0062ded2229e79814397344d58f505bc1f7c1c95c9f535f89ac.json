{"ast":null,"code":"var _jsxFileName = \"D:\\\\NeuverraX-Tech_Workspace\\\\Agentic-AI-PRO\\\\research-copilot\\\\research-copilot-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js - Authentication & User Management\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Simulated user data structure\n  // In production, this would come from Firebase/backend\n  const [users, setUsers] = useState(() => {\n    const saved = localStorage.getItem('research_copilot_users');\n    return saved ? JSON.parse(saved) : {};\n  });\n\n  // Get current user from localStorage\n  useEffect(() => {\n    const savedUser = localStorage.getItem('research_copilot_current_user');\n    if (savedUser) {\n      const userData = JSON.parse(savedUser);\n      setCurrentUser(userData);\n\n      // Reset daily query count if it's a new day\n      const today = new Date().toDateString();\n      if (userData.lastQueryDate !== today) {\n        const updatedUser = {\n          ...userData,\n          queriesUsedToday: 0,\n          lastQueryDate: today\n        };\n        setCurrentUser(updatedUser);\n        localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Save users to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('research_copilot_users', JSON.stringify(users));\n  }, [users]);\n\n  // Sign up function\n  const signup = async (email, password, displayName) => {\n    if (users[email]) {\n      throw new Error('User already exists');\n    }\n    const isStudent = email.endsWith('.edu.in') || email.endsWith('.ac.in');\n    const newUser = {\n      uid: Date.now().toString(),\n      email,\n      displayName: displayName || email.split('@')[0],\n      createdAt: new Date().toISOString(),\n      // Subscription Info\n      subscriptionTier: 'free',\n      subscriptionStatus: 'active',\n      subscriptionStart: new Date().toISOString(),\n      subscriptionEnd: null,\n      // Usage Tracking\n      queriesUsedToday: 0,\n      lastQueryDate: new Date().toDateString(),\n      totalQueriesAllTime: 0,\n      // Limits\n      dailyQueryLimit: 5,\n      // 5 for free, -1 for unlimited\n\n      // Student Discount\n      isStudent,\n      studentEmail: isStudent ? email : null,\n      studentDiscount: isStudent ? 0.40 : 0\n    };\n    setUsers(prev => ({\n      ...prev,\n      [email]: newUser\n    }));\n    setCurrentUser(newUser);\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(newUser));\n    return newUser;\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    const user = users[email];\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Reset daily query count if it's a new day\n    const today = new Date().toDateString();\n    if (user.lastQueryDate !== today) {\n      user.queriesUsedToday = 0;\n      user.lastQueryDate = today;\n      setUsers(prev => ({\n        ...prev,\n        [email]: user\n      }));\n    }\n    setCurrentUser(user);\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(user));\n    return user;\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('research_copilot_current_user');\n  };\n\n  // Check if user can make a query\n  const canMakeQuery = () => {\n    if (!currentUser) return false;\n\n    // Pro and Enterprise users have unlimited queries\n    if (currentUser.subscriptionTier === 'pro' || currentUser.subscriptionTier === 'enterprise') {\n      return true;\n    }\n\n    // Free users are limited\n    return currentUser.queriesUsedToday < currentUser.dailyQueryLimit;\n  };\n\n  // Increment query count\n  const incrementQueryCount = () => {\n    if (!currentUser) return;\n    const today = new Date().toDateString();\n    const updatedUser = {\n      ...currentUser,\n      queriesUsedToday: today === currentUser.lastQueryDate ? currentUser.queriesUsedToday + 1 : 1,\n      lastQueryDate: today,\n      totalQueriesAllTime: currentUser.totalQueriesAllTime + 1\n    };\n    setCurrentUser(updatedUser);\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\n\n    // Update in users object\n    setUsers(prev => ({\n      ...prev,\n      [currentUser.email]: updatedUser\n    }));\n  };\n\n  // Upgrade to Pro\n  const upgradeToPro = plan => {\n    if (!currentUser) return;\n    const isAnnual = plan === 'pro-annual';\n    const basePrice = isAnnual ? 5999 : 599;\n    const discountedPrice = currentUser.isStudent ? basePrice * (1 - currentUser.studentDiscount) : basePrice;\n    const subscriptionEnd = new Date();\n    if (isAnnual) {\n      subscriptionEnd.setFullYear(subscriptionEnd.getFullYear() + 1);\n    } else {\n      subscriptionEnd.setMonth(subscriptionEnd.getMonth() + 1);\n    }\n    const updatedUser = {\n      ...currentUser,\n      subscriptionTier: 'pro',\n      subscriptionStatus: 'active',\n      subscriptionPlan: plan,\n      subscriptionStart: new Date().toISOString(),\n      subscriptionEnd: subscriptionEnd.toISOString(),\n      dailyQueryLimit: -1,\n      // Unlimited\n      paidAmount: discountedPrice,\n      billingCycle: isAnnual ? 'annual' : 'monthly'\n    };\n    setCurrentUser(updatedUser);\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\n    setUsers(prev => ({\n      ...prev,\n      [currentUser.email]: updatedUser\n    }));\n    return updatedUser;\n  };\n\n  // Get queries remaining today\n  const getQueriesRemaining = () => {\n    if (!currentUser) return 0;\n    if (currentUser.subscriptionTier === 'pro' || currentUser.subscriptionTier === 'enterprise') {\n      return -1; // Unlimited\n    }\n    return Math.max(0, currentUser.dailyQueryLimit - currentUser.queriesUsedToday);\n  };\n\n  // Get time until queries reset\n  const getTimeUntilReset = () => {\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    const diff = tomorrow - now;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return {\n      hours,\n      minutes\n    };\n  };\n\n  // Calculate pricing with student discount\n  const getPricing = plan => {\n    const prices = {\n      'pro-monthly': 399,\n      'pro-annual': 3999,\n      'enterprise': 29999\n    };\n    const basePrice = prices[plan] || 0;\n    if (currentUser !== null && currentUser !== void 0 && currentUser.isStudent && (plan === 'pro-monthly' || plan === 'pro-annual')) {\n      const discountedPrice = basePrice * (1 - currentUser.studentDiscount);\n      return {\n        original: basePrice,\n        discounted: Math.round(discountedPrice),\n        discount: currentUser.studentDiscount,\n        savings: Math.round(basePrice - discountedPrice)\n      };\n    }\n    return {\n      original: basePrice,\n      discounted: basePrice,\n      discount: 0,\n      savings: 0\n    };\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    canMakeQuery,\n    incrementQueryCount,\n    upgradeToPro,\n    getQueriesRemaining,\n    getTimeUntilReset,\n    getPricing,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"9bOlZJle5O2plc3tYVD0x9yuo9A=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","users","setUsers","saved","localStorage","getItem","JSON","parse","savedUser","userData","today","Date","toDateString","lastQueryDate","updatedUser","queriesUsedToday","setItem","stringify","signup","email","password","displayName","Error","isStudent","endsWith","newUser","uid","now","toString","split","createdAt","toISOString","subscriptionTier","subscriptionStatus","subscriptionStart","subscriptionEnd","totalQueriesAllTime","dailyQueryLimit","studentEmail","studentDiscount","prev","login","user","logout","removeItem","canMakeQuery","incrementQueryCount","upgradeToPro","plan","isAnnual","basePrice","discountedPrice","setFullYear","getFullYear","setMonth","getMonth","subscriptionPlan","paidAmount","billingCycle","getQueriesRemaining","Math","max","getTimeUntilReset","tomorrow","setDate","getDate","setHours","diff","hours","floor","minutes","getPricing","prices","original","discounted","round","discount","savings","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/NeuverraX-Tech_Workspace/Agentic-AI-PRO/research-copilot/research-copilot-frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js - Authentication & User Management\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Simulated user data structure\r\n  // In production, this would come from Firebase/backend\r\n  const [users, setUsers] = useState(() => {\r\n    const saved = localStorage.getItem('research_copilot_users');\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n\r\n  // Get current user from localStorage\r\n  useEffect(() => {\r\n    const savedUser = localStorage.getItem('research_copilot_current_user');\r\n    if (savedUser) {\r\n      const userData = JSON.parse(savedUser);\r\n      setCurrentUser(userData);\r\n      \r\n      // Reset daily query count if it's a new day\r\n      const today = new Date().toDateString();\r\n      if (userData.lastQueryDate !== today) {\r\n        const updatedUser = {\r\n          ...userData,\r\n          queriesUsedToday: 0,\r\n          lastQueryDate: today\r\n        };\r\n        setCurrentUser(updatedUser);\r\n        localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Save users to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('research_copilot_users', JSON.stringify(users));\r\n  }, [users]);\r\n\r\n  // Sign up function\r\n  const signup = async (email, password, displayName) => {\r\n    if (users[email]) {\r\n      throw new Error('User already exists');\r\n    }\r\n\r\n    const isStudent = email.endsWith('.edu.in') || email.endsWith('.ac.in');\r\n    \r\n    const newUser = {\r\n      uid: Date.now().toString(),\r\n      email,\r\n      displayName: displayName || email.split('@')[0],\r\n      createdAt: new Date().toISOString(),\r\n      \r\n      // Subscription Info\r\n      subscriptionTier: 'free',\r\n      subscriptionStatus: 'active',\r\n      subscriptionStart: new Date().toISOString(),\r\n      subscriptionEnd: null,\r\n      \r\n      // Usage Tracking\r\n      queriesUsedToday: 0,\r\n      lastQueryDate: new Date().toDateString(),\r\n      totalQueriesAllTime: 0,\r\n      \r\n      // Limits\r\n      dailyQueryLimit: 5, // 5 for free, -1 for unlimited\r\n      \r\n      // Student Discount\r\n      isStudent,\r\n      studentEmail: isStudent ? email : null,\r\n      studentDiscount: isStudent ? 0.40 : 0\r\n    };\r\n\r\n    setUsers(prev => ({\r\n      ...prev,\r\n      [email]: newUser\r\n    }));\r\n\r\n    setCurrentUser(newUser);\r\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(newUser));\r\n    \r\n    return newUser;\r\n  };\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    const user = users[email];\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    // Reset daily query count if it's a new day\r\n    const today = new Date().toDateString();\r\n    if (user.lastQueryDate !== today) {\r\n      user.queriesUsedToday = 0;\r\n      user.lastQueryDate = today;\r\n      \r\n      setUsers(prev => ({\r\n        ...prev,\r\n        [email]: user\r\n      }));\r\n    }\r\n\r\n    setCurrentUser(user);\r\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(user));\r\n    \r\n    return user;\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('research_copilot_current_user');\r\n  };\r\n\r\n  // Check if user can make a query\r\n  const canMakeQuery = () => {\r\n    if (!currentUser) return false;\r\n    \r\n    // Pro and Enterprise users have unlimited queries\r\n    if (currentUser.subscriptionTier === 'pro' || currentUser.subscriptionTier === 'enterprise') {\r\n      return true;\r\n    }\r\n    \r\n    // Free users are limited\r\n    return currentUser.queriesUsedToday < currentUser.dailyQueryLimit;\r\n  };\r\n\r\n  // Increment query count\r\n  const incrementQueryCount = () => {\r\n    if (!currentUser) return;\r\n\r\n    const today = new Date().toDateString();\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      queriesUsedToday: today === currentUser.lastQueryDate ? currentUser.queriesUsedToday + 1 : 1,\r\n      lastQueryDate: today,\r\n      totalQueriesAllTime: currentUser.totalQueriesAllTime + 1\r\n    };\r\n\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\r\n    \r\n    // Update in users object\r\n    setUsers(prev => ({\r\n      ...prev,\r\n      [currentUser.email]: updatedUser\r\n    }));\r\n  };\r\n\r\n  // Upgrade to Pro\r\n  const upgradeToPro = (plan) => {\r\n    if (!currentUser) return;\r\n\r\n    const isAnnual = plan === 'pro-annual';\r\n    const basePrice = isAnnual ? 5999 : 599;\r\n    const discountedPrice = currentUser.isStudent ? basePrice * (1 - currentUser.studentDiscount) : basePrice;\r\n\r\n    const subscriptionEnd = new Date();\r\n    if (isAnnual) {\r\n      subscriptionEnd.setFullYear(subscriptionEnd.getFullYear() + 1);\r\n    } else {\r\n      subscriptionEnd.setMonth(subscriptionEnd.getMonth() + 1);\r\n    }\r\n\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      subscriptionTier: 'pro',\r\n      subscriptionStatus: 'active',\r\n      subscriptionPlan: plan,\r\n      subscriptionStart: new Date().toISOString(),\r\n      subscriptionEnd: subscriptionEnd.toISOString(),\r\n      dailyQueryLimit: -1, // Unlimited\r\n      paidAmount: discountedPrice,\r\n      billingCycle: isAnnual ? 'annual' : 'monthly'\r\n    };\r\n\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('research_copilot_current_user', JSON.stringify(updatedUser));\r\n    \r\n    setUsers(prev => ({\r\n      ...prev,\r\n      [currentUser.email]: updatedUser\r\n    }));\r\n\r\n    return updatedUser;\r\n  };\r\n\r\n  // Get queries remaining today\r\n  const getQueriesRemaining = () => {\r\n    if (!currentUser) return 0;\r\n    \r\n    if (currentUser.subscriptionTier === 'pro' || currentUser.subscriptionTier === 'enterprise') {\r\n      return -1; // Unlimited\r\n    }\r\n    \r\n    return Math.max(0, currentUser.dailyQueryLimit - currentUser.queriesUsedToday);\r\n  };\r\n\r\n  // Get time until queries reset\r\n  const getTimeUntilReset = () => {\r\n    const now = new Date();\r\n    const tomorrow = new Date(now);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    \r\n    const diff = tomorrow - now;\r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return { hours, minutes };\r\n  };\r\n\r\n  // Calculate pricing with student discount\r\n  const getPricing = (plan) => {\r\n    const prices = {\r\n      'pro-monthly': 399,\r\n      'pro-annual': 3999,\r\n      'enterprise': 29999\r\n    };\r\n\r\n    const basePrice = prices[plan] || 0;\r\n    \r\n    if (currentUser?.isStudent && (plan === 'pro-monthly' || plan === 'pro-annual')) {\r\n      const discountedPrice = basePrice * (1 - currentUser.studentDiscount);\r\n      return {\r\n        original: basePrice,\r\n        discounted: Math.round(discountedPrice),\r\n        discount: currentUser.studentDiscount,\r\n        savings: Math.round(basePrice - discountedPrice)\r\n      };\r\n    }\r\n\r\n    return {\r\n      original: basePrice,\r\n      discounted: basePrice,\r\n      discount: 0,\r\n      savings: 0\r\n    };\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout,\r\n    canMakeQuery,\r\n    incrementQueryCount,\r\n    upgradeToPro,\r\n    getQueriesRemaining,\r\n    getTimeUntilReset,\r\n    getPricing,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}